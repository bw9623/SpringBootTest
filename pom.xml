<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>	<!-- POM 버전 -->	
	<!-- 프로젝트 계층 정보 -->
	<parent>	
		<groupId>org.springframework.boot</groupId>	
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	
	<groupId>com.spring</groupId>			<!-- 프로젝트를 생성하는 조직의 고유 아이디를 결정한다. 일반적으로 도메인 이름을 거꾸로 적는다. -->
	<artifactId>SpringBoot</artifactId>		<!-- 프로젝트 빌드시 파일 대표이름 이다. groupId 내에서 유일해야 하낟. Maven을 이용하여 반드시 다음과 같은 규칙으로 파일이 생성된다.
												 artifactId-version.packaging. 위 의 경우 빌드 시 SpringBoot-0.0.1-SNAPSHOT.war 파일이 생성된다. -->
	<version>0.0.1-SNAPSHOT</version>		<!-- 프로젝트의 현재 버전, 프로젝트 개발 중일 때는 SNAPSHOT을 접미사로 사용 -->
	<name>SpringBoot</name>					<!-- 프로젝트 이름 -->
	<description>Demo project for Spring Boot</description>		<!-- 프로젝트에 대한 간략한 설명 -->
	
	<properties>
		<!-- 버전 관리시 용이하다. ex) 해당 자바 버전을 선언하고 dependencies에서 다음과 같이 활용 가능 하다. 
			 <version>${java.version}</version> -->
		<java.version>1.8</java.version>
	</properties>
	
	<!-- dependencies 태그 안에는 프로젝트와 의존 관계에 있는 라이브러리들을 관리 한다. -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>	<!-- spring-boot-starter-web : tomcat은 포함되어있지만, JSP 엔진은 미포함 (jsp 사용을 위해서는 추가 설정 필요) -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		
		<!-- mariaDB -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
		</dependency>

		<!-- myBatis -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.1.4</version>
		</dependency>

		<!-- 스프링 부트는 스프링 프로젝트와 다르게, 동적 파일들의 파일 변경을 자동으로 반영하지 않는다 
			 기존 스프링과 동일하게 자동 반영하기 위해선 다음과 같은 설정을 추가하여 주면 된다.	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
<!-- 		<dependency> -->
<!-- 			<groupId>mysql</groupId> -->
<!-- 			<artifactId>mysql-connector-java</artifactId> -->
<!-- 			<scope>runtime</scope> -->
<!-- 		</dependency> -->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- 스프링부트에서 JSP 파일 구동 설정  
				1. jasper, jstl을 의존성에 추가 
				2. apllication.properties에 jsp 페이지 처리를 위한 prefix/suffix 추가	-->
		<!-- jasper 라이브러리 -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- jstl 라이브러리 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		
		<!-- thymeleaf 라이브러리 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>		
		
	</dependencies>

	<!-- 빌드에 사용할 플러그인 목록 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
